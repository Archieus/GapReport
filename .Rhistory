read.table("~/BarronsConfidence.txt", sep = "\")
read.table("~/BarronsConfidence.txt", sep = "\t")
read.table("~/BarronsConfidence.txt", sep = "\\t")
read.table("~/BarronsConfidence.txt", sep = "\\")
read.table("~/BarronsConfidence.txt", sep = ",")
read.table("~/BarronsConfidence.txt", sep = " ")
read.table("~/BarronsConfidence.txt", sep = "\t")
read.table("~/BarronsConfidence.txt", sep = "\\t")
read.table("~/BarronsConfidence.txt", sep = "/\t")
test <- read.table("~/BarronsConfidence.txt", sep = "\\t")
test <- read.table("~/BarronsConfidence.txt", sep = "\t")
test <- read.table("~/BarronsConfidence.txt", sep = "/t")
test <- read.table("~/BarronsConfidence.txt", sep = "\t")
test <- read.table("~/BarronsConfidence.txt")
test <- read.table("~/BarronsConfidence.txt", sep ="\t")
setwd("~/")
test <- read.table("~/BarronsConfidence.txt", sep ="\t")
scan("~/BarronsConfidence.txt")
test <- read.table("~/BarronsConfidence.txt", sep =",")
View(test)
colno <- max(count.fields("~/BarronsConfidence.txt", sep = ','))
test <- as.data.frame(read.table("~/BarronsConfidence.txt", sep =","))
test <- as.data.frame(read.table("~/BarronsConfidence.txt", sep ="\"))
)
)
test <-read.table("~/BarronsConfidence.txt", sep ="\")
test <-read.table("~/BarronsConfidence.txt", sep ="\\")
View(test)
test <-read.table("~/BarronsConfidence.txt", sep = c("\\", "\\t"))
test <-read.table("~/BarronsConfidence.txt", sep = "\\t")
test <-read.table("~/BarronsConfidence.txt", sep = c("\\t"))
test <-read.table("~/BarronsConfidence.txt", sep = c("\\", "t"))
setwd("~/")
read.table("BarronsConfidence.txt", sep = "\t", dec = ".", header = TRUE, encoding = "UTF-8", stringsAsFactors = FALSE, quote = "")
read.table("BarronsConfidence.txt", sep = "/t", dec = ".", header = TRUE, encoding = "UTF-8", stringsAsFactors = FALSE, quote = "")
read.table("BarronsConfidence.txt", sep = "\\t", dec = ".", header = TRUE, encoding = "UTF-8", stringsAsFactors = FALSE, quote = "")
source('~/.active-rstudio-document', echo=TRUE)
last(BEER)
library(quantmod)
Sys.setenv(TZ = "UTC")
#1. Avg Annual Hourly Earnings All Employees Total Private = CES0500000003
#2. Employed FT median Usual Weekly Real Earnings: Wages and Salasy 16Years and Older = LES1252881600Q
###Correlates best with quarterly Core Inflation Data "ECIWAG"###
#3. Employment Cost Index Wages and Salaries Private industry Workers = ECIWAG
#4. Employer Cost for Emplyee Compensation = Not Available on FRED
#5. Compensation per hour Nonfarm Business Sector: Unit Labor Costs = ULCNFB
#6. Unit Labor Costs = ULCNFB
wagedata <- c("CES0500000003", "LES1252881600Q", "ECIWAG", "ULCNFB")
suppressWarnings(getSymbols(wagedata, src = 'FRED', from = "1997-05-01"))
View(CES0500000003)
View(ECIWAG)
View(LES1252881600Q)
View(ULCNFB)
?getSymbols
?to.period
to.quarterly(CES0500000003,indexAt='yearqtr',drop.time=TRUE)
to.quarterly(CES0500000003,indexAt='yearmon',drop.time=TRUE)
to.quarterly(CES0500000003,indexAt='firstof',drop.time=TRUE)
to.quarterly(CES0500000003,indexAt='startof',drop.time=TRUE)
HourlyEarnings <- to.quarterly(CES0500000003,indexAt='startof',drop.time=TRUE)[,4]
View(HourlyEarnings)
layout(rbind(c(1,2), c(3,4)))
plot(ECIWAG)
plot(HourlyEarnings)
plot(LES1252881600Q)
plot(ULCNFB)
layout(rbind(c(1,2), c(3,4)))
plot(ECIWAG, main  = "Employment Cost Index")
plot(HourlyEarnings, main = "Hourly Earnings")
plot(LES1252881600Q, main = "Real Earnings & Salaries")
plot(ULCNFB, main = "Unit Labor Costs")
ECI.ROC <- na.omit(ROC(ECIWAG,4))
plot(ECI.ROC)
####1-Year ROC####
ECI.ROC <- na.omit(ROC(ECIWAG,4))
HrEa.ROC <- na.omit(ROC(HourlyEarnings,4))
RealES.ROC <- na.omit(ROC(LES1252881600Q,4))
ULC.ROC <- na.omit(ROCULCNFB,4))
####1-Year ROC####
ECI.ROC <- na.omit(ROC(ECIWAG,4))
HrEa.ROC <- na.omit(ROC(HourlyEarnings,4))
RealES.ROC <- na.omit(ROC(LES1252881600Q,4))
ULC.ROC <- na.omit(ROC(ULCNFB,4))
layout(rbind(c(1,2), c(3,4)))
plot(ECI.ROC, main  = "Employment Cost Index 1-Yr ROC")
plot(HrEa.ROC, main = "Hourly Earnings 1-Yr ROC")
plot(RealES.ROC, main = "Real Earnings & Salaries 1-Yr ROC")
plot(ULC.ROC, main = "Unit Labor Costs 1-Yr ROC")
layout(rbind(c(1,2), c(3,4)))
plot(ECIWAG, main  = "Employment Cost Index")
plot(HourlyEarnings, main = "Hourly Earnings")
plot(LES1252881600Q, main = "Real Earnings & Salaries")
plot(ULCNFB, main = "Unit Labor Costs")
layout(rbind(c(1,2), c(3,4)))
plot(ECI.ROC['2009:/'], main  = "Employment Cost Index 1-Yr ROC")
plot(HrEa.ROC['2009:/'], main = "Hourly Earnings 1-Yr ROC")
plot(RealES.ROC['2009:/'], main = "Real Earnings & Salaries 1-Yr ROC")
plot(ULC.ROC['2009:/'], main = "Unit Labor Costs 1-Yr ROC")
setwd("C:/RPrograms/GapReport")
source('C:/RPrograms/GapReport/DailyGapReportV3.R', echo=TRUE)
# Loc <- which(colnames(TDxts)=="VGK") #Find column number associated with a column name ###
####Check for Day and Holidays####
for(i in 1: length(Holidays)) {
if((today == "Mon" | today == "Tue" | today == "Wed") & Sys.Date()-1 == Holidays[i]){
sapply(LowClose.tr, function(x){
try(
suppressWarnings(getSymbols(
x, src = 'google',
from=(Sys.Date()-5),
env=LOWSC)),
silent=TRUE)
})
} else {if((today == "Thu" | today == "Fri") & Sys.Date()-1 == Holidays[i]){
sapply(LowClose.tr, function(x){
try(
suppressWarnings(getSymbols(
x, src = 'google',
from=(Sys.Date()-3),
env=LOWSC)),
silent=TRUE)
})
} else {if(today == "Mon"  & Sys.Date()-1 != Holidays[i]) {#Regular Days without Holidays
sapply(LowClose.tr, function(x){
try(
suppressWarnings(getSymbols(
x, src = 'google',
from=(Sys.Date()-4),
env=LOWSC)),
silent=TRUE)})
} else {if(today !="Mon" & Sys.Date()-1 != Holidays[i]) {
sapply(LowClose.tr, function(x){
try(
suppressWarnings(getSymbols(
x, src = 'google',
from=(Sys.Date()-2),
env=LOWSC)),
silent=TRUE)})
}
}
}
}
}
Close.data <- eapply(LOWSC, Cl)
Close.df <- data.frame(Close.data)
PctChg <- na.omit(ROC(Close.df,1, "discrete"))*100
Close.df <- rbind(last(Close.df),PctChg)
View(Close.df)
# Loc <- which(colnames(TDxts)=="VGK") #Find column number associated with a column name ###
####Check for Day and Holidays####
for(i in 1: length(Holidays)) {
if((today == "Mon" | today == "Tue" | today == "Wed") & Sys.Date()-1 == Holidays[i]){
sapply(LowClose.tr, function(x){
try(
suppressWarnings(getSymbols(
x, src = 'google',
from=(Sys.Date()-5),
env=LOWSC)),
silent=TRUE)
})
} else {if((today == "Thu" | today == "Fri") & Sys.Date()-1 == Holidays[i]){
sapply(LowClose.tr, function(x){
try(
suppressWarnings(getSymbols(
x, src = 'google',
from=(Sys.Date()-3),
env=LOWSC)),
silent=TRUE)
})
} else {if((today == "Mon"| today = "Tue")  & Sys.Date()-1 != Holidays[i]) {#Regular Days without Holidays
sapply(LowClose.tr, function(x){
try(
suppressWarnings(getSymbols(
x, src = 'google',
from=(Sys.Date()-4),
env=LOWSC)),
silent=TRUE)})
} else {if((today =="Wed" | today = "Thu" | today = "Fri") & Sys.Date()-1 != Holidays[i]) {
sapply(LowClose.tr, function(x){
try(
suppressWarnings(getSymbols(
x, src = 'google',
from=(Sys.Date()-2),
env=LOWSC)),
silent=TRUE)})
}
}
}
}
}
# Loc <- which(colnames(TDxts)=="VGK") #Find column number associated with a column name ###
####Check for Day and Holidays####
for(i in 1: length(Holidays)) {
if((today == "Mon" | today == "Tue" | today == "Wed") & Sys.Date()-1 == Holidays[i]){
sapply(LowClose.tr, function(x){
try(
suppressWarnings(getSymbols(
x, src = 'google',
from=(Sys.Date()-5),
env=LOWSC)),
silent=TRUE)
})
} else {if((today == "Thu" | today == "Fri") & Sys.Date()-1 == Holidays[i]){
sapply(LowClose.tr, function(x){
try(
suppressWarnings(getSymbols(
x, src = 'google',
from=(Sys.Date()-3),
env=LOWSC)),
silent=TRUE)
})
} else {if((today == "Mon"| today == "Tue")  & Sys.Date()-1 != Holidays[i]) {#Regular Days without Holidays
sapply(LowClose.tr, function(x){
try(
suppressWarnings(getSymbols(
x, src = 'google',
from=(Sys.Date()-4),
env=LOWSC)),
silent=TRUE)})
} else {if((today =="Wed" | today == "Thu" | today == "Fri") & Sys.Date()-1 != Holidays[i]) {
sapply(LowClose.tr, function(x){
try(
suppressWarnings(getSymbols(
x, src = 'google',
from=(Sys.Date()-2),
env=LOWSC)),
silent=TRUE)})
}
}
}
}
}
Close.data <- eapply(LOWSC, Cl)
Close.df <- data.frame(Close.data)
PctChg <- na.omit(ROC(Close.df,1, "discrete"))*100
Close.df <- rbind(last(Close.df),PctChg)
View(Close.df)
LOWSC$ADMS
getsymbols("ADMS", stc = "google", from=Sys.Date()-5)
getSymbols("ADMS", stc = "google", from=Sys.Date()-5)
View(ADMS)
getSymbols("ADMS", stc = "google", from=Sys.Date()-3)
ADMS
isBizday()
holi <- holidayNYSE(years.included)
holi <- holidayNYSE()
business.days <- date.sequence[isBizday(date.sequence, holi)]
business.days <- isBizday(date.sequence, holi)
isBizday(Sys.Date(), holidays = )
isBizday(Sys.Date(), holidays = holidays)
isBizday(Sys.Date(), holidays = Holidays)
?isBizday
isBizday(Sys.Date(), holidays = holidayNYSE(), wday = 1:5)
isBizday(today, holidays = holidayNYSE(), wday = 1:5)
isBizday(date(), holidays = holidayNYSE(), wday = 1:5)
Calndr <- timeSequence("2018-01-01", to = Sys,Date, by = "day")
Calndr <- timeSequence("2018-01-01", to = Sys.Date, by = "day")
Calndr <- timeSequence("2018-01-01", to = Sys.Date(), by = "day")
Calndr
business.days <- Calndr[isBizday(Calndr, Holidays)];
business.days
Holidays <- as.Date(holidayNYSE())
Calndr <- timeSequence("2018-01-01", to = Sys.Date(), by = "day")
business.days <- Calndr[isBizday(Calndr, Holidays)]
str(Calndr)
last(Calndr)
last(Calndr)-3
as.Date(last(Caldnr))-5
as.Date(last(Calndr))-5
Calndr
business.days
library(jsonlite)
library(quantmod)
library(data.table)
library(timeDate)
Sys.setenv(TZ = "EST5EDT")
# AlphaVantage API Key: 4FS12H08TP68SJV2
####Identify Business Days (excludes NYSE Holidays and Weekends)###
Holidays <- as.Date(holidayNYSE())
Calndr <- timeSequence("2018-01-01", to = Sys.Date(), by = "day")
business.days <- Calndr[isBizday(Calndr, Holidays)]
getQuoteEH <- function(ticks){
qRoot <- "https://query1.finance.yahoo.com/v7/finance/quote?fields=symbol,regularMarketChangePercent,regularMarketPrice,regularMarketChange,regularMarketTime&formatted=false&symbols="
z <- fromJSON(paste(qRoot, paste(ticks, collapse=","), sep=""))
tryCatch(fromJSON(paste(qRoot, paste(ticks, collapse=","), sep="")),error=function(e) {remove(ticks)})
z <- z$quoteResponse$result[,c("symbol", "regularMarketTime", "regularMarketPrice", "regularMarketChange", "regularMarketChangePercent")]
row.names(z) <- z$symbol
z$symbol <- NULL
names(z) <- c("Time", "Price", "Change", "Percent Change")
z$Time <- as.POSIXct(z$Time, origin = '1970-01-01 00:00:00')
return(z)
}
##Download Quotes for Up Gaps
UpGaps <- read.table("F:/GapData/Input Data/UpGaps.txt", sep = ",", header = TRUE)
UpGaps.tr = t(UpGaps)
UpGap.data <- t(as.data.frame(sapply(UpGaps.tr, function(x) getQuoteEH(x))))
##Download Quotes for Down Gaps
DownGaps <- read.table('F:/GapData/Input Data/DownGaps.txt', sep = ",", header = TRUE)
DownGaps.tr = t(DownGaps)
DownGap.data <- t(as.data.frame(sapply(DownGaps.tr, function(x) getQuote(x))))
##Download S&P and Russell 2000 data for Structured Products
Indexes <- c('^GSPC', '^RUT')
suppressWarnings(getSymbols(Indexes, src = 'yahoo', from = (Sys.Date()-2615)))
RUT.df <- as.data.frame(RUT)
names(RUT.df) <- c('Open', 'High', 'Low', 'Close', 'Volume', 'Adj-Close')
SP500.df <- as.data.frame(GSPC)
names(SP500.df) <- c('Open', 'High', 'Low', 'Close', 'Volume', 'Adj-Close')
#### BEGIN LOW CLOSE DATA DOWNLOAD ####
#######################################
LowClose <- read.csv('F:/GapData/Input Data/LowClose.txt', sep = "," , header = TRUE)
LowClose.tr <- t(LowClose)
##Download data using getSymbols quantmod
LOWSC <- new.env() # create new enviroment for data to be loaded to
today <- substr(date(), start = 1, stop =3) #Pulls Day of the week from the date() function
sapply(LowClose.tr, function(x){
try(
suppressWarnings(getSymbols(
x, src = 'google',
from=(as.date(business.days)-2,
env=LOWSC)),
silent=TRUE)
})
sapply(LowClose.tr, function(x){
try(
suppressWarnings(getSymbols(
x, src = 'google',
from=(as.Date(last(business.days))-2,
env=LOWSC)),
silent=TRUE)
})
as.Date(last(business.days))
as.Date(last(business.days))-2
getsymbols("ADMS", src = "google", from = as.Date(last(business.days)-2))
getSymbols("ADMS", src = "google", from = as.Date(last(business.days)-2))
sapply(LowClose.tr, function(x){
try(
suppressWarnings(getSymbols(
x, src = 'google',
from=(as.Date(last(business.days)-2),
env=LOWSC)),
silent=TRUE)
})
sapply(LowClose.tr, function(x){
try(
suppressWarnings(getSymbols(
x, src = 'google',
from= as.Date(last(business.days)-2),
env=LOWSC)),
silent=TRUE)
})
Close.data <- eapply(LOWSC, Cl)
Close.df <- data.frame(Close.data)
PctChg <- na.omit(ROC(Close.df,1, "discrete"))*100
Close.df <- rbind(last(Close.df),PctChg)
View(Close.df)
LOWSC$AIMT
as.Date(last(business.day)-2)
as.Date(last(business.days)-2)
sapply(LowClose.tr, function(x){
try(
suppressWarnings(getSymbols(
x, src = 'google',
from= as.Date(last(business.days)-2),
to = as.Date(last(business,days))
env=LOWSC)),
silent=TRUE)
})
sapply(LowClose.tr, function(x){
try(
suppressWarnings(getSymbols(
x, src = 'google',
from= as.Date(last(business.days)-2),
to = as.Date(last(business,days)),
env=LOWSC)),
silent=TRUE)
})
sapply(LowClose.tr, function(x){
try(
suppressWarnings(getSymbols(
x, src = 'google',
from= as.Date(last(business.days)-2),
to = as.Date(last(business.days)),
env=LOWSC)),
silent=TRUE)
})
LOWSC$AKCA
sapply(LowClose.tr, function(x){
try(
suppressWarnings(getSymbols(
x, src = 'google',
from= as.Date(last(business.days)-3),
to = as.Date(last(business.days)),
env=LOWSC)),
silent=TRUE)
})
LOWSC$AKCA
?getSymbols
ls.str(LOWSC)
as.Date(last(business.days)-1)
as.Date(last(business.days)-2)
as.Date(last(business.days)-3)
as.Date(last(business.days)-3
)
business.days-3
as.Date(last(business.days))-3
sapply(LowClose.tr, function(x){
try(
suppressWarnings(getSymbols(
x, src = 'google',
from= as.Date(last(business.days))-2,
to = as.Date(last(business.days)),
env=LOWSC)),
silent=TRUE)
})
LOWSC$AKCA
as.Date(last(business.days))-3
as.Date(last(business.days))-2
as.Date(last(business.days))-1
business.days
Sys.Date()-2
tail(business.days,2)
?last
last(business.days, '2 days')
last(business.days, '1 days')
last(business.days, '2 days')
last(business.days, '2 days ago')
business.days < Sys.Date() & business.days > Sys.Date()-1
first(last(business.days))
last(first(business.days))
?which
which(business.days == last)
last(business.days)
last(business.days)- last(business.days, '1 day')
daterange <- tail(business.days,2)
daterange
daterange <- tail(business.days,3)
daterange
daterange[,2]
str(daterange)
daterange[[1]]
daterange[1]
daterange[2]
daterange[3]
as.Date(daterange[3])
sapply(LowClose.tr, function(x){
try(
suppressWarnings(getSymbols(
x, src = 'google',
from= as.Date(daterange[3]),
env=LOWSC)),
silent=TRUE)
})
getSymbols("IBM", src = 'google', from = as.Date(daterange[3]))
daterange[3]
as.Date(daterange[3])
as.Date(daterange[2])
as.Date(daterange[1])
sapply(LowClose.tr, function(x){
try(
suppressWarnings(getSymbols(
x, src = 'google',
from= as.Date(daterange[1]),
env=LOWSC)),
silent=TRUE)
})
LOWSC$AKCA
Close.data <- eapply(LOWSC, Cl)
Close.df <- data.frame(Close.data)
PctChg <- na.omit(ROC(Close.df,1, "discrete"))*100
Close.df <- rbind(last(Close.df),PctChg)
View(Close.df)
#### LOAD PORTFOLIO DATA ####
#Accounts <- read.csv("F:/Gap Data/Input Data/Position Export.csv", sep = ",", header = TRUE)
Accounts <- read.csv("F:/VBATradeMacros/Position Export.csv", sep = ",", header = TRUE)
#### GATHER LOW CLOSE DATA ####
Lownames <- gsub( ".Close",  "", names(Close.df), fixed = TRUE)
names(Close.df) <- Lownames
LowQuotes <- as.data.frame(t(Close.df))
LowQuotes <- setNames(cbind(rownames(LowQuotes), LowQuotes, row.names = NULL), c("Symbol", "Close", "PctChg"))
#### GENERATE LOW CLOSE REPORT ####
LowRaw <- merge(Accounts, LowQuotes, by = "Symbol", all = FALSE)
LowRawExCA <- LowRaw[which(LowRaw$Asset.Class.Code != "C"),]
LowReport <- LowRawExCA[,c(1,7,3,2,8,20,21)]
#### GATHER UP- and DOWN-GAP DATA ####
UPdata <- as.data.frame(cbind(rownames(UpGap.data), UpGap.data, row.names = NULL))
names(UPdata) <- c("Symbol", "Time", "Last"," Change", "PctChg")
UPGapRaw <- merge(Accounts, UPdata, by = "Symbol", all = FALSE)
UPGapExCA <- UPGapRaw[which(UPGapRaw$Asset.Class.Code != "C"),]
UPGapReport <- UPGapExCA[,c(1,7,3,2,21:23)]
### Coerce Data Frame to single Characters as there are columns that are actually Lists ###
UPGapRep.df <- data.frame(lapply(UPGapReport, as.character), stringsAsFactors=FALSE)
#### GATHER UP- and DOWN-GAP DATA ####
DNdata <- as.data.frame(cbind(rownames(DownGap.data), DownGap.data, row.names = NULL))
names(DNdata) <- c("Symbol", "Time", "Last", "Change", "PctChg")
DNGapRaw <- merge(Accounts, DNdata, by = "Symbol", all = FALSE)
DNGapExCA <- DNGapRaw[which(DNGapRaw$Asset.Class.Code != "C"),]
DNGapReport <- as.data.frame(DNGapExCA[,c(1,7,3,2,21:23)])
### Coerce Data Frame to single Characters as there are columns that are actually Lists ###
DNGapRep.df <- data.frame(lapply(DNGapReport, as.character), stringsAsFactors=FALSE)
#### WRITE DATA TO CSV FILES
write.csv(RUT.df, file = 'F:/Matt-Data/RUT.csv', row.names = TRUE)
write.csv(SP500.df, file = 'F:/Matt-Data/SP500.csv', row.names = TRUE)
#write.csv(UST.df, file  = 'F:/Tameka-Data/LongTsy.csv', row.names = TRUE)
#write.csv(UpGap.data, file = 'Upfinal.csv')
#write.csv(DownGap.data, file = 'Downfinal.csv')
#write.csv(t(Close.df), file = "LowScreen.csv")
write.csv(UPGapRep.df, file = "UpGapReport.csv")
write.csv(DNGapRep.df, file = "DNGapReport.csv")
write.csv(LowReport, file = "LowCloseReport.csv")
###AUDIT FUNCTION### See how many symbols were omitted from the download
print(length(ls(LOWSC)))
print(length(LowClose.tr))
View(LowReport)
